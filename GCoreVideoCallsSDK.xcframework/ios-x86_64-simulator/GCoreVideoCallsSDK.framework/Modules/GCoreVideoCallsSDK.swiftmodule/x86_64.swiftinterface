// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
// swift-module-flags: -target x86_64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name GCoreVideoCallsSDK
import AVFoundation
import CommonCrypto
import Foundation
@_exported import GCoreVideoCallsSDK
import Network
import Swift
import UIKit
import WebRTC
import _Concurrency
import zlib
public enum FoundationTransportError : Swift.Error {
  case invalidRequest
  case invalidOutputStream
  case timeout
  public static func == (a: GCoreVideoCallsSDK.FoundationTransportError, b: GCoreVideoCallsSDK.FoundationTransportError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc public class FoundationTransport : ObjectiveC.NSObject, GCoreVideoCallsSDK.StarscreamTransport, Foundation.StreamDelegate {
  public var usingTLS: Swift.Bool {
    get
  }
  public init(streamConfiguration: ((Foundation.InputStream, Foundation.OutputStream) -> Swift.Void)? = nil)
  @objc deinit
  public func connect(url: Foundation.URL, timeout: Swift.Double = 10, certificatePinning: GCoreVideoCallsSDK.CertificatePinning? = nil)
  public func disconnect()
  public func register(delegate: GCoreVideoCallsSDK.TransportEventClient)
  public func write(data: Foundation.Data, completion: @escaping ((Swift.Error?) -> ()))
  @objc open func stream(_ aStream: Foundation.Stream, handle eventCode: Foundation.Stream.Event)
}
public enum SecurityErrorCode : Swift.UInt16 {
  case acceptFailed
  case pinningFailed
  public init?(rawValue: Swift.UInt16)
  public typealias RawValue = Swift.UInt16
  public var rawValue: Swift.UInt16 {
    get
  }
}
public enum PinningState {
  case success
  case failed(CoreFoundation.CFError?)
}
public protocol CertificatePinning : AnyObject {
  func evaluateTrust(trust: Security.SecTrust, domain: Swift.String?, completion: ((GCoreVideoCallsSDK.PinningState) -> ()))
}
public protocol HeaderValidator : AnyObject {
  func validate(headers: [Swift.String : Swift.String], key: Swift.String) -> Swift.Error?
}
public struct AudioObject {
  public let peerId: Swift.String
  public let rtcAudioTrack: WebRTC.RTCAudioTrack
}
public enum HTTPUpgradeError : Swift.Error {
  case notAnUpgrade(Swift.Int)
  case invalidData
}
public struct HTTPWSHeader {
  public static func createUpgrade(request: Foundation.URLRequest, supportsCompression: Swift.Bool, secKeyValue: Swift.String) -> Foundation.URLRequest
  public static func generateWebSocketKey() -> Swift.String
}
public enum HTTPEvent {
  case success([Swift.String : Swift.String])
  case failure(Swift.Error)
}
public protocol HTTPHandlerDelegate : AnyObject {
  func didReceiveHTTP(event: GCoreVideoCallsSDK.HTTPEvent)
}
public protocol HTTPHandler {
  func register(delegate: GCoreVideoCallsSDK.HTTPHandlerDelegate)
  func convert(request: Foundation.URLRequest) -> Foundation.Data
  func parse(data: Foundation.Data) -> Swift.Int
}
public protocol HTTPServerDelegate : AnyObject {
  func didReceive(event: GCoreVideoCallsSDK.HTTPEvent)
}
public protocol HTTPServerHandler {
  func register(delegate: GCoreVideoCallsSDK.HTTPServerDelegate)
  func parse(data: Foundation.Data)
  func createResponse(headers: [Swift.String : Swift.String]) -> Foundation.Data
}
public struct URLParts {
}
extension Foundation.URL {
  public var isTLSScheme: Swift.Bool {
    get
  }
  public func getParts() -> GCoreVideoCallsSDK.URLParts?
}
public protocol FrameCollectorDelegate : AnyObject {
  func didForm(event: GCoreVideoCallsSDK.FrameCollector.Event)
  func decompress(data: Foundation.Data, isFinal: Swift.Bool) -> Foundation.Data?
}
@_hasMissingDesignatedInitializers public class FrameCollector {
  public enum Event {
    case text(Swift.String)
    case binary(Foundation.Data)
    case pong(Foundation.Data?)
    case ping(Foundation.Data?)
    case error(Swift.Error)
    case closed(Swift.String, Swift.UInt16)
  }
  public func add(frame: GCoreVideoCallsSDK.Frame)
  @objc deinit
}
final public class JoinPermissionsObject : Swift.Decodable {
  final public let audio: Swift.Bool
  final public let video: Swift.Bool
  final public let share: Swift.Bool
  @objc deinit
  public init(from decoder: Swift.Decoder) throws
}
@available(macOS 10.14, iOS 12.0, watchOS 5.0, tvOS 12.0, *)
@available(watchOS, unavailable)
public class WebSocketServer : GCoreVideoCallsSDK.Server, GCoreVideoCallsSDK.ConnectionDelegate {
  public var onEvent: ((GCoreVideoCallsSDK.ServerEvent) -> Swift.Void)?
  public init()
  public func start(address: Swift.String, port: Swift.UInt16) -> Swift.Error?
  public func didReceive(event: GCoreVideoCallsSDK.ServerEvent)
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(macOS 10.14, iOS 12.0, watchOS 5.0, tvOS 12.0, *)
public class ServerConnection : GCoreVideoCallsSDK.Connection, GCoreVideoCallsSDK.HTTPServerDelegate, GCoreVideoCallsSDK.FramerEventClient, GCoreVideoCallsSDK.FrameCollectorDelegate, GCoreVideoCallsSDK.TransportEventClient {
  public var onEvent: ((GCoreVideoCallsSDK.ConnectionEvent) -> Swift.Void)?
  weak public var delegate: GCoreVideoCallsSDK.ConnectionDelegate?
  public func write(data: Foundation.Data, opcode: GCoreVideoCallsSDK.FrameOpCode)
  public func connectionChanged(state: GCoreVideoCallsSDK.ConnectionState)
  public func didReceive(event: GCoreVideoCallsSDK.HTTPEvent)
  public func frameProcessed(event: GCoreVideoCallsSDK.FrameEvent)
  public func didForm(event: GCoreVideoCallsSDK.FrameCollector.Event)
  public func decompress(data: Foundation.Data, isFinal: Swift.Bool) -> Foundation.Data?
  @objc deinit
}
public struct GCoreRoomLogger {
  public static var shared: GCoreVideoCallsSDK.GCoreRoomLogger? {
    get
  }
  public static var log: ((_ message: Swift.String) -> Swift.Void)?
  public static func activateLogger()
  public static func disableLogger()
}
public enum ErrorType : Swift.Error {
  case compressionError
  case securityError
  case protocolError
  case serverError
  public static func == (a: GCoreVideoCallsSDK.ErrorType, b: GCoreVideoCallsSDK.ErrorType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct WSError : Swift.Error {
  public let type: GCoreVideoCallsSDK.ErrorType
  public let message: Swift.String
  public let code: Swift.UInt16
  public init(type: GCoreVideoCallsSDK.ErrorType, message: Swift.String, code: Swift.UInt16)
}
public protocol WebSocketClient : AnyObject {
  func connect()
  func disconnect(closeCode: Swift.UInt16)
  func write(string: Swift.String, completion: (() -> ())?)
  func write(stringData: Foundation.Data, completion: (() -> ())?)
  func write(data: Foundation.Data, completion: (() -> ())?)
  func write(ping: Foundation.Data, completion: (() -> ())?)
  func write(pong: Foundation.Data, completion: (() -> ())?)
}
extension GCoreVideoCallsSDK.WebSocketClient {
  public func write(string: Swift.String)
  public func write(data: Foundation.Data)
  public func write(ping: Foundation.Data)
  public func write(pong: Foundation.Data)
  public func disconnect()
}
public enum WebSocketEvent {
  case connected([Swift.String : Swift.String])
  case disconnected(Swift.String, Swift.UInt16)
  case text(Swift.String)
  case binary(Foundation.Data)
  case pong(Foundation.Data?)
  case ping(Foundation.Data?)
  case error(Swift.Error?)
  case viabilityChanged(Swift.Bool)
  case reconnectSuggested(Swift.Bool)
  case cancelled
}
public protocol WebSocketDelegate : AnyObject {
  func didReceive(event: GCoreVideoCallsSDK.WebSocketEvent, client: GCoreVideoCallsSDK.WebSocket)
}
open class WebSocket : GCoreVideoCallsSDK.WebSocketClient, GCoreVideoCallsSDK.EngineDelegate {
  weak public var delegate: GCoreVideoCallsSDK.WebSocketDelegate?
  public var onEvent: ((GCoreVideoCallsSDK.WebSocketEvent) -> Swift.Void)?
  public var request: Foundation.URLRequest
  public var callbackQueue: Dispatch.DispatchQueue
  public var respondToPingWithPong: Swift.Bool {
    get
    set
  }
  public init(request: Foundation.URLRequest, engine: GCoreVideoCallsSDK.Engine)
  convenience public init(request: Foundation.URLRequest, certPinner: GCoreVideoCallsSDK.CertificatePinning? = FoundationSecurity(), compressionHandler: GCoreVideoCallsSDK.CompressionHandler? = nil, useCustomEngine: Swift.Bool = true)
  public func connect()
  public func disconnect(closeCode: Swift.UInt16 = CloseCode.normal.rawValue)
  public func forceDisconnect()
  public func write(data: Foundation.Data, completion: (() -> ())?)
  public func write(string: Swift.String, completion: (() -> ())?)
  public func write(stringData: Foundation.Data, completion: (() -> ())?)
  public func write(ping: Foundation.Data, completion: (() -> ())?)
  public func write(pong: Foundation.Data, completion: (() -> ())?)
  public func didReceive(event: GCoreVideoCallsSDK.WebSocketEvent)
  @objc deinit
}
public enum RoomError : Swift.Error {
  case fatalError(Swift.Error)
  case invalidSocketURL
  case cameraPermissionNotGranted
  case microPermissionNotGranted
}
public protocol RoomListener {
  func roomClientHandle(error: GCoreVideoCallsSDK.RoomError)
  func roomClientStartToConnectWithServices()
  func roomClientSuccessfullyConnectWithServices()
  func roomClientDidConnected()
  func roomClientReconnecting()
  func roomClientReconnectingFailed()
  func roomClientSocketDidDisconnected(roomClient: GCoreVideoCallsSDK.GCoreRoomClient)
  func roomClient(roomClient: GCoreVideoCallsSDK.GCoreRoomClient, joinPermissions: GCoreVideoCallsSDK.JoinPermissionsObject)
  func roomClient(roomClient: GCoreVideoCallsSDK.GCoreRoomClient, joinWithPeersInRoom peers: [GCoreVideoCallsSDK.PeerObject])
  func roomClient(roomClient: GCoreVideoCallsSDK.GCoreRoomClient, handlePeer: GCoreVideoCallsSDK.PeerObject)
  func roomClient(roomClient: GCoreVideoCallsSDK.GCoreRoomClient, peerClosed: Swift.String)
  func roomClient(roomClient: GCoreVideoCallsSDK.GCoreRoomClient, produceLocalVideoTrack videoTrack: WebRTC.RTCVideoTrack)
  func roomClient(roomClient: GCoreVideoCallsSDK.GCoreRoomClient, produceLocalAudioTrack audioTrack: WebRTC.RTCAudioTrack)
  func roomClient(roomClient: GCoreVideoCallsSDK.GCoreRoomClient, didCloseLocalVideoTrack videoTrack: WebRTC.RTCVideoTrack?)
  func roomClient(roomClient: GCoreVideoCallsSDK.GCoreRoomClient, didCloseLocalAudioTrack audioTrack: WebRTC.RTCAudioTrack?)
  func roomClient(roomClient: GCoreVideoCallsSDK.GCoreRoomClient, handledRemoteVideo videoObject: GCoreVideoCallsSDK.VideoObject)
  func roomClient(roomClient: GCoreVideoCallsSDK.GCoreRoomClient, didCloseRemoteVideoByModerator byModerator: Swift.Bool, videoObject: GCoreVideoCallsSDK.VideoObject)
  func roomClient(roomClient: GCoreVideoCallsSDK.GCoreRoomClient, produceRemoteAudio audioObject: GCoreVideoCallsSDK.AudioObject)
  func roomClient(roomClient: GCoreVideoCallsSDK.GCoreRoomClient, didCloseRemoteAudioByModerator byModerator: Swift.Bool, audioObject: GCoreVideoCallsSDK.AudioObject)
  func roomClient(roomClient: GCoreVideoCallsSDK.GCoreRoomClient, activeSpeakerPeers peers: [Swift.String])
  func roomClient(roomClient: GCoreVideoCallsSDK.GCoreRoomClient, toggleByModerator kind: Swift.String, status: Swift.Bool)
  func roomClient(roomClient: GCoreVideoCallsSDK.GCoreRoomClient, acceptedPermissionFromModerator fromModerator: Swift.Bool, peer: GCoreVideoCallsSDK.PeerObject, requestType: Swift.String)
  func roomClient(roomClient: GCoreVideoCallsSDK.GCoreRoomClient, disableProducerByModerator kind: Swift.String)
  func roomClientWaitingForModeratorJoinAccept()
  func roomClientModeratorRejectedJoinRequest()
  func roomClient(roomClient: GCoreVideoCallsSDK.GCoreRoomClient, moderatorIsAskedToJoin: GCoreVideoCallsSDK.ModeratorIsAskedToJoin)
  func roomClient(roomClient: GCoreVideoCallsSDK.GCoreRoomClient, updateMeInfo: GCoreVideoCallsSDK.UpdateMeInfoObject)
  func roomClient(roomClient: GCoreVideoCallsSDK.GCoreRoomClient, requestToModerator: GCoreVideoCallsSDK.RequestToModerator)
  func roomClientRemovedByModerator()
  func roomClient(roomClient: GCoreVideoCallsSDK.GCoreRoomClient, captureSession: AVFoundation.AVCaptureSession, captureDevice: AVFoundation.AVCaptureDevice)
}
public enum MediaError : Swift.Error {
  case CAMERA_DEVICE_NOT_FOUND
  public static func == (a: GCoreVideoCallsSDK.MediaError, b: GCoreVideoCallsSDK.MediaError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum CloseCode : Swift.UInt16 {
  case normal
  case goingAway
  case protocolError
  case protocolUnhandledType
  case noStatusReceived
  case encoding
  case policyViolated
  case messageTooBig
  public init?(rawValue: Swift.UInt16)
  public typealias RawValue = Swift.UInt16
  public var rawValue: Swift.UInt16 {
    get
  }
}
public enum FrameOpCode : Swift.UInt8 {
  case continueFrame
  case textFrame
  case binaryFrame
  case connectionClose
  case ping
  case pong
  case unknown
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public struct Frame {
}
public enum FrameEvent {
  case frame(GCoreVideoCallsSDK.Frame)
  case error(Swift.Error)
}
public protocol FramerEventClient : AnyObject {
  func frameProcessed(event: GCoreVideoCallsSDK.FrameEvent)
}
public protocol Framer {
  func add(data: Foundation.Data)
  func register(delegate: GCoreVideoCallsSDK.FramerEventClient)
  func createWriteFrame(opcode: GCoreVideoCallsSDK.FrameOpCode, payload: Foundation.Data, isCompressed: Swift.Bool) -> Foundation.Data
  func updateCompression(supports: Swift.Bool)
  func supportsCompression() -> Swift.Bool
}
public class WSFramer : GCoreVideoCallsSDK.Framer {
  public var compressionEnabled: Swift.Bool
  public init(isServer: Swift.Bool = false)
  public func updateCompression(supports: Swift.Bool)
  public func supportsCompression() -> Swift.Bool
  public func add(data: Foundation.Data)
  public func register(delegate: GCoreVideoCallsSDK.FramerEventClient)
  public func createWriteFrame(opcode: GCoreVideoCallsSDK.FrameOpCode, payload: Foundation.Data, isCompressed: Swift.Bool) -> Foundation.Data
  @objc deinit
}
public protocol MyWSArrayType {
}
extension Swift.UInt8 : GCoreVideoCallsSDK.MyWSArrayType {
}
extension Swift.Array where Element : GCoreVideoCallsSDK.MyWSArrayType, Element : Swift.UnsignedInteger {
  public func readUint16(offset: Swift.Int) -> Swift.UInt16
  public func readUint64(offset: Swift.Int) -> Swift.UInt64
  public func unmaskData(maskStart: Swift.Int, offset: Swift.Int, length: Swift.Int) -> Foundation.Data
}
public func writeUint16(_ buffer: inout [Swift.UInt8], offset: Swift.Int, value: Swift.UInt16)
public func writeUint32(_ buffer: inout [Swift.UInt8], offset: Swift.Int, value: Swift.UInt32)
public func writeUint64(_ buffer: inout [Swift.UInt8], offset: Swift.Int, value: Swift.UInt64)
public enum FoundationSecurityError : Swift.Error {
  case invalidRequest
  public static func == (a: GCoreVideoCallsSDK.FoundationSecurityError, b: GCoreVideoCallsSDK.FoundationSecurityError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public class FoundationSecurity {
  public init(allowSelfSigned: Swift.Bool = false)
  @objc deinit
}
extension GCoreVideoCallsSDK.FoundationSecurity : GCoreVideoCallsSDK.CertificatePinning {
  public func evaluateTrust(trust: Security.SecTrust, domain: Swift.String?, completion: ((GCoreVideoCallsSDK.PinningState) -> ()))
}
extension GCoreVideoCallsSDK.FoundationSecurity : GCoreVideoCallsSDK.HeaderValidator {
  public func validate(headers: [Swift.String : Swift.String], key: Swift.String) -> Swift.Error?
}
final public class RequestToModerator : Swift.Decodable {
  final public let peerId: Swift.String
  final public let userName: Swift.String
  final public let requestType: Swift.String
  @objc deinit
  public init(from decoder: Swift.Decoder) throws
}
public class WSCompression : GCoreVideoCallsSDK.CompressionHandler {
  public init()
  public func load(headers: [Swift.String : Swift.String])
  public func decompress(data: Foundation.Data, isFinal: Swift.Bool) -> Foundation.Data?
  public func compress(data: Foundation.Data) -> Foundation.Data?
  @objc deinit
}
public struct RoomOptions {
  public init(cameraPosition: AVFoundation.AVCaptureDevice.Position = .front)
}
public struct VideoObject {
  public let peerId: Swift.String
  public let rtcVideoTrack: WebRTC.RTCVideoTrack
}
extension Foundation.URLRequest {
  public func cURL(pretty: Swift.Bool = false) -> Swift.String
}
public protocol EngineDelegate : AnyObject {
  func didReceive(event: GCoreVideoCallsSDK.WebSocketEvent)
}
public protocol Engine {
  func register(delegate: GCoreVideoCallsSDK.EngineDelegate)
  func start(request: Foundation.URLRequest)
  func stop(closeCode: Swift.UInt16)
  func forceStop()
  func write(data: Foundation.Data, opcode: GCoreVideoCallsSDK.FrameOpCode, completion: (() -> ())?)
  func write(string: Swift.String, completion: (() -> ())?)
}
public enum TCPTransportError : Swift.Error {
  case invalidRequest
  public static func == (a: GCoreVideoCallsSDK.TCPTransportError, b: GCoreVideoCallsSDK.TCPTransportError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 10.14, iOS 12.0, watchOS 5.0, tvOS 12.0, *)
public class TCPTransport : GCoreVideoCallsSDK.StarscreamTransport {
  public var usingTLS: Swift.Bool {
    get
  }
  public init(connection: Network.NWConnection)
  public init()
  public func connect(url: Foundation.URL, timeout: Swift.Double = 10, certificatePinning: GCoreVideoCallsSDK.CertificatePinning? = nil)
  public func disconnect()
  public func register(delegate: GCoreVideoCallsSDK.TransportEventClient)
  public func write(data: Foundation.Data, completion: @escaping ((Swift.Error?) -> ()))
  @objc deinit
}
public enum SwiftyJSONError : Swift.Int, Swift.Error {
  case unsupportedType
  case indexOutOfBounds
  case elementTooDeep
  case wrongType
  case notExist
  case invalidJSON
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension GCoreVideoCallsSDK.SwiftyJSONError : Foundation.CustomNSError {
  public static var errorDomain: Swift.String {
    get
  }
  public var errorCode: Swift.Int {
    get
  }
  public var errorUserInfo: [Swift.String : Any] {
    get
  }
}
public enum Type : Swift.Int {
  case number
  case string
  case bool
  case array
  case dictionary
  case null
  case unknown
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct JSON {
  public init(data: Foundation.Data, options opt: Foundation.JSONSerialization.ReadingOptions = []) throws
  public init(_ object: Any)
  public init(parseJSON jsonString: Swift.String)
  public mutating func merge(with other: GCoreVideoCallsSDK.JSON) throws
  public func merged(with other: GCoreVideoCallsSDK.JSON) throws -> GCoreVideoCallsSDK.JSON
  public var type: GCoreVideoCallsSDK.`Type` {
    get
  }
  public var error: GCoreVideoCallsSDK.SwiftyJSONError? {
    get
  }
  public var object: Any {
    get
    set
  }
  @available(*, unavailable, renamed: "null")
  public static var nullJSON: GCoreVideoCallsSDK.JSON {
    get
  }
  public static var null: GCoreVideoCallsSDK.JSON {
    get
  }
}
public enum Index<T> : Swift.Comparable {
  case array(Swift.Int)
  case dictionary(Swift.DictionaryIndex<Swift.String, T>)
  case null
  public static func == (lhs: GCoreVideoCallsSDK.Index<T>, rhs: GCoreVideoCallsSDK.Index<T>) -> Swift.Bool
  public static func < (lhs: GCoreVideoCallsSDK.Index<T>, rhs: GCoreVideoCallsSDK.Index<T>) -> Swift.Bool
}
public typealias JSONIndex = GCoreVideoCallsSDK.Index<GCoreVideoCallsSDK.JSON>
public typealias JSONRawIndex = GCoreVideoCallsSDK.Index<Any>
extension GCoreVideoCallsSDK.JSON : Swift.Collection {
  public typealias Index = GCoreVideoCallsSDK.JSONRawIndex
  public var startIndex: GCoreVideoCallsSDK.JSON.Index {
    get
  }
  public var endIndex: GCoreVideoCallsSDK.JSON.Index {
    get
  }
  public func index(after i: GCoreVideoCallsSDK.JSON.Index) -> GCoreVideoCallsSDK.JSON.Index
  public subscript(position: GCoreVideoCallsSDK.JSON.Index) -> (Swift.String, GCoreVideoCallsSDK.JSON) {
    get
  }
  public typealias Element = (Swift.String, GCoreVideoCallsSDK.JSON)
  public typealias Indices = Swift.DefaultIndices<GCoreVideoCallsSDK.JSON>
  public typealias Iterator = Swift.IndexingIterator<GCoreVideoCallsSDK.JSON>
  public typealias SubSequence = Swift.Slice<GCoreVideoCallsSDK.JSON>
}
public enum JSONKey {
  case index(Swift.Int)
  case key(Swift.String)
}
public protocol JSONSubscriptType {
  var jsonKey: GCoreVideoCallsSDK.JSONKey { get }
}
extension Swift.Int : GCoreVideoCallsSDK.JSONSubscriptType {
  public var jsonKey: GCoreVideoCallsSDK.JSONKey {
    get
  }
}
extension Swift.String : GCoreVideoCallsSDK.JSONSubscriptType {
  public var jsonKey: GCoreVideoCallsSDK.JSONKey {
    get
  }
}
extension GCoreVideoCallsSDK.JSON {
  public subscript(path: [GCoreVideoCallsSDK.JSONSubscriptType]) -> GCoreVideoCallsSDK.JSON {
    get
    set
  }
  public subscript(path: GCoreVideoCallsSDK.JSONSubscriptType...) -> GCoreVideoCallsSDK.JSON {
    get
    set
  }
}
extension GCoreVideoCallsSDK.JSON : Swift.ExpressibleByStringLiteral {
  public init(stringLiteral value: Swift.StringLiteralType)
  public init(extendedGraphemeClusterLiteral value: Swift.StringLiteralType)
  public init(unicodeScalarLiteral value: Swift.StringLiteralType)
  public typealias ExtendedGraphemeClusterLiteralType = Swift.StringLiteralType
  public typealias StringLiteralType = Swift.StringLiteralType
  public typealias UnicodeScalarLiteralType = Swift.StringLiteralType
}
extension GCoreVideoCallsSDK.JSON : Swift.ExpressibleByIntegerLiteral {
  public init(integerLiteral value: Swift.IntegerLiteralType)
  public typealias IntegerLiteralType = Swift.IntegerLiteralType
}
extension GCoreVideoCallsSDK.JSON : Swift.ExpressibleByBooleanLiteral {
  public init(booleanLiteral value: Swift.BooleanLiteralType)
  public typealias BooleanLiteralType = Swift.BooleanLiteralType
}
extension GCoreVideoCallsSDK.JSON : Swift.ExpressibleByFloatLiteral {
  public init(floatLiteral value: Swift.FloatLiteralType)
  public typealias FloatLiteralType = Swift.FloatLiteralType
}
extension GCoreVideoCallsSDK.JSON : Swift.ExpressibleByDictionaryLiteral {
  public init(dictionaryLiteral elements: (Swift.String, Any)...)
  public typealias Key = Swift.String
  public typealias Value = Any
}
extension GCoreVideoCallsSDK.JSON : Swift.ExpressibleByArrayLiteral {
  public init(arrayLiteral elements: Any...)
  public typealias ArrayLiteralElement = Any
}
extension GCoreVideoCallsSDK.JSON : Swift.RawRepresentable {
  public init?(rawValue: Any)
  public var rawValue: Any {
    get
  }
  public func rawData(options opt: Foundation.JSONSerialization.WritingOptions = JSONSerialization.WritingOptions(rawValue: 0)) throws -> Foundation.Data
  public func rawString(_ encoding: Swift.String.Encoding = .utf8, options opt: Foundation.JSONSerialization.WritingOptions = .prettyPrinted) -> Swift.String?
  public func rawString(_ options: [GCoreVideoCallsSDK.writingOptionsKeys : Any]) -> Swift.String?
  public typealias RawValue = Any
}
extension GCoreVideoCallsSDK.JSON : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
}
extension GCoreVideoCallsSDK.JSON {
  public var array: [GCoreVideoCallsSDK.JSON]? {
    get
  }
  public var arrayValue: [GCoreVideoCallsSDK.JSON] {
    get
  }
  public var arrayObject: [Any]? {
    get
    set
  }
}
extension GCoreVideoCallsSDK.JSON {
  public var dictionary: [Swift.String : GCoreVideoCallsSDK.JSON]? {
    get
  }
  public var dictionaryValue: [Swift.String : GCoreVideoCallsSDK.JSON] {
    get
  }
  public var dictionaryObject: [Swift.String : Any]? {
    get
    set
  }
}
extension GCoreVideoCallsSDK.JSON {
  public var bool: Swift.Bool? {
    get
    set
  }
  public var boolValue: Swift.Bool {
    get
    set
  }
}
extension GCoreVideoCallsSDK.JSON {
  public var string: Swift.String? {
    get
    set
  }
  public var stringValue: Swift.String {
    get
    set
  }
}
extension GCoreVideoCallsSDK.JSON {
  public var number: Foundation.NSNumber? {
    get
    set
  }
  public var numberValue: Foundation.NSNumber {
    get
    set
  }
}
extension GCoreVideoCallsSDK.JSON {
  public var null: Foundation.NSNull? {
    get
    set
  }
  public func exists() -> Swift.Bool
}
extension GCoreVideoCallsSDK.JSON {
  public var url: Foundation.URL? {
    get
    set
  }
}
extension GCoreVideoCallsSDK.JSON {
  public var double: Swift.Double? {
    get
    set
  }
  public var doubleValue: Swift.Double {
    get
    set
  }
  public var float: Swift.Float? {
    get
    set
  }
  public var floatValue: Swift.Float {
    get
    set
  }
  public var int: Swift.Int? {
    get
    set
  }
  public var intValue: Swift.Int {
    get
    set
  }
  public var uInt: Swift.UInt? {
    get
    set
  }
  public var uIntValue: Swift.UInt {
    get
    set
  }
  public var int8: Swift.Int8? {
    get
    set
  }
  public var int8Value: Swift.Int8 {
    get
    set
  }
  public var uInt8: Swift.UInt8? {
    get
    set
  }
  public var uInt8Value: Swift.UInt8 {
    get
    set
  }
  public var int16: Swift.Int16? {
    get
    set
  }
  public var int16Value: Swift.Int16 {
    get
    set
  }
  public var uInt16: Swift.UInt16? {
    get
    set
  }
  public var uInt16Value: Swift.UInt16 {
    get
    set
  }
  public var int32: Swift.Int32? {
    get
    set
  }
  public var int32Value: Swift.Int32 {
    get
    set
  }
  public var uInt32: Swift.UInt32? {
    get
    set
  }
  public var uInt32Value: Swift.UInt32 {
    get
    set
  }
  public var int64: Swift.Int64? {
    get
    set
  }
  public var int64Value: Swift.Int64 {
    get
    set
  }
  public var uInt64: Swift.UInt64? {
    get
    set
  }
  public var uInt64Value: Swift.UInt64 {
    get
    set
  }
}
extension GCoreVideoCallsSDK.JSON : Swift.Comparable {
}
public func == (lhs: GCoreVideoCallsSDK.JSON, rhs: GCoreVideoCallsSDK.JSON) -> Swift.Bool
public func <= (lhs: GCoreVideoCallsSDK.JSON, rhs: GCoreVideoCallsSDK.JSON) -> Swift.Bool
public func >= (lhs: GCoreVideoCallsSDK.JSON, rhs: GCoreVideoCallsSDK.JSON) -> Swift.Bool
public func > (lhs: GCoreVideoCallsSDK.JSON, rhs: GCoreVideoCallsSDK.JSON) -> Swift.Bool
public func < (lhs: GCoreVideoCallsSDK.JSON, rhs: GCoreVideoCallsSDK.JSON) -> Swift.Bool
public enum writingOptionsKeys {
  case jsonSerialization
  case castNilToNSNull
  case maxObjextDepth
  case encoding
  public static func == (a: GCoreVideoCallsSDK.writingOptionsKeys, b: GCoreVideoCallsSDK.writingOptionsKeys) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GCoreVideoCallsSDK.JSON : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct MeetRoomParametrs : Swift.Decodable {
  public var customParameters: [Swift.String : Swift.String]
  public init(roomId: Swift.String, displayName: Swift.String, peerId: Swift.String? = nil, clientHostName: Swift.String? = nil, isModerator: Swift.Bool)
  public var parameters: [Swift.String : Swift.String] {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
public class StringHTTPHandler : GCoreVideoCallsSDK.HTTPHandler {
  public init()
  public func convert(request: Foundation.URLRequest) -> Foundation.Data
  public func parse(data: Foundation.Data) -> Swift.Int
  public func register(delegate: GCoreVideoCallsSDK.HTTPHandlerDelegate)
  @objc deinit
}
public protocol CompressionHandler {
  func load(headers: [Swift.String : Swift.String])
  func decompress(data: Foundation.Data, isFinal: Swift.Bool) -> Foundation.Data?
  func compress(data: Foundation.Data) -> Foundation.Data?
}
final public class GCoreRoomClient {
  public init(roomOptions: GCoreVideoCallsSDK.RoomOptions, requestParameters: GCoreVideoCallsSDK.MeetRoomParametrs, roomListener: GCoreVideoCallsSDK.RoomListener?)
  final public func toggleAudio(isOn: Swift.Bool)
  final public func toggleVideo(isOn: Swift.Bool)
  final public func toggleCameraPosition(completion: ((Swift.Error?) -> Swift.Void)?)
  final public func askModeratorToEnableTrack(kind: Swift.String)
  final public func acceptedPermissionByModerator(peerId: Swift.String, kind: Swift.String)
  final public func rejectPermissionByModerator(peerId: Swift.String, kind: Swift.String)
  final public func disableTrackProducerByModerator(peerId: Swift.String, kind: Swift.String)
  final public func open() throws
  final public func close()
  final public func audioSessionActivate()
  final public func acceptJoinRequestByModerator(peerId: Swift.String)
  final public func rejectJoinRequestByModerator(peerId: Swift.String)
  final public func removeUserByModerator(peerId: Swift.String)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class FoundationHTTPServerHandler : GCoreVideoCallsSDK.HTTPServerHandler {
  public func register(delegate: GCoreVideoCallsSDK.HTTPServerDelegate)
  public func createResponse(headers: [Swift.String : Swift.String]) -> Foundation.Data
  public func parse(data: Foundation.Data)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
public class NativeEngine : ObjectiveC.NSObject, GCoreVideoCallsSDK.Engine, Foundation.URLSessionDataDelegate, Foundation.URLSessionWebSocketDelegate {
  public func register(delegate: GCoreVideoCallsSDK.EngineDelegate)
  public func start(request: Foundation.URLRequest)
  public func stop(closeCode: Swift.UInt16)
  public func forceStop()
  public func write(string: Swift.String, completion: (() -> ())?)
  public func write(data: Foundation.Data, opcode: GCoreVideoCallsSDK.FrameOpCode, completion: (() -> ())?)
  @objc public func urlSession(_ session: Foundation.URLSession, webSocketTask: Foundation.URLSessionWebSocketTask, didOpenWithProtocol protocol: Swift.String?)
  @objc public func urlSession(_ session: Foundation.URLSession, webSocketTask: Foundation.URLSessionWebSocketTask, didCloseWith closeCode: Foundation.URLSessionWebSocketTask.CloseCode, reason: Foundation.Data?)
  @objc override dynamic public init()
  @objc deinit
}
final public class ModeratorIsAskedToJoin : Swift.Decodable {
  final public let peerId: Swift.String
  final public let userName: Swift.String
  @objc deinit
  public init(from decoder: Swift.Decoder) throws
}
public class FoundationHTTPHandler : GCoreVideoCallsSDK.HTTPHandler {
  public init()
  public func convert(request: Foundation.URLRequest) -> Foundation.Data
  public func parse(data: Foundation.Data) -> Swift.Int
  public func register(delegate: GCoreVideoCallsSDK.HTTPHandlerDelegate)
  @objc deinit
}
public enum ConnectionEvent {
  case connected([Swift.String : Swift.String])
  case disconnected(Swift.String, Swift.UInt16)
  case text(Swift.String)
  case binary(Foundation.Data)
  case pong(Foundation.Data?)
  case ping(Foundation.Data?)
  case error(Swift.Error)
}
public protocol Connection {
  func write(data: Foundation.Data, opcode: GCoreVideoCallsSDK.FrameOpCode)
}
public protocol ConnectionDelegate : AnyObject {
  func didReceive(event: GCoreVideoCallsSDK.ServerEvent)
}
public enum ServerEvent {
  case connected(GCoreVideoCallsSDK.Connection, [Swift.String : Swift.String])
  case disconnected(GCoreVideoCallsSDK.Connection, Swift.String, Swift.UInt16)
  case text(GCoreVideoCallsSDK.Connection, Swift.String)
  case binary(GCoreVideoCallsSDK.Connection, Foundation.Data)
  case pong(GCoreVideoCallsSDK.Connection, Foundation.Data?)
  case ping(GCoreVideoCallsSDK.Connection, Foundation.Data?)
}
public protocol Server {
  func start(address: Swift.String, port: Swift.UInt16) -> Swift.Error?
}
final public class UpdateMeInfoObject : Swift.Decodable {
  final public let peerId: Swift.String
  final public let role: Swift.String
  final public let displayName: Swift.String
  final public let itisparticipant: Swift.Bool
  final public let canRecord: Swift.Bool
  final public let waitingRoom: Swift.Bool
  @objc deinit
  public init(from decoder: Swift.Decoder) throws
}
public class WSEngine : GCoreVideoCallsSDK.Engine, GCoreVideoCallsSDK.TransportEventClient, GCoreVideoCallsSDK.FramerEventClient, GCoreVideoCallsSDK.FrameCollectorDelegate, GCoreVideoCallsSDK.HTTPHandlerDelegate {
  public var respondToPingWithPong: Swift.Bool
  public init(transport: GCoreVideoCallsSDK.StarscreamTransport, certPinner: GCoreVideoCallsSDK.CertificatePinning? = nil, headerValidator: GCoreVideoCallsSDK.HeaderValidator = FoundationSecurity(), httpHandler: GCoreVideoCallsSDK.HTTPHandler = FoundationHTTPHandler(), framer: GCoreVideoCallsSDK.Framer = WSFramer(), compressionHandler: GCoreVideoCallsSDK.CompressionHandler? = nil)
  public func register(delegate: GCoreVideoCallsSDK.EngineDelegate)
  public func start(request: Foundation.URLRequest)
  public func stop(closeCode: Swift.UInt16 = CloseCode.normal.rawValue)
  public func forceStop()
  public func write(string: Swift.String, completion: (() -> ())?)
  public func write(data: Foundation.Data, opcode: GCoreVideoCallsSDK.FrameOpCode, completion: (() -> ())?)
  public func connectionChanged(state: GCoreVideoCallsSDK.ConnectionState)
  public func didReceiveHTTP(event: GCoreVideoCallsSDK.HTTPEvent)
  public func frameProcessed(event: GCoreVideoCallsSDK.FrameEvent)
  public func decompress(data: Foundation.Data, isFinal: Swift.Bool) -> Foundation.Data?
  public func didForm(event: GCoreVideoCallsSDK.FrameCollector.Event)
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class PeerObject : Swift.Decodable {
  final public let id: Swift.String
  final public let displayName: Swift.String?
  @objc deinit
  public init(from decoder: Swift.Decoder) throws
}
public enum ConnectionState {
  case connected
  case waiting
  case cancelled
  case failed(Swift.Error?)
  case viability(Swift.Bool)
  case shouldReconnect(Swift.Bool)
  case receive(Foundation.Data)
}
public protocol TransportEventClient : AnyObject {
  func connectionChanged(state: GCoreVideoCallsSDK.ConnectionState)
}
public protocol StarscreamTransport : AnyObject {
  func register(delegate: GCoreVideoCallsSDK.TransportEventClient)
  func connect(url: Foundation.URL, timeout: Swift.Double, certificatePinning: GCoreVideoCallsSDK.CertificatePinning?)
  func disconnect()
  func write(data: Foundation.Data, completion: @escaping ((Swift.Error?) -> ()))
  var usingTLS: Swift.Bool { get }
}
extension GCoreVideoCallsSDK.FoundationTransportError : Swift.Equatable {}
extension GCoreVideoCallsSDK.FoundationTransportError : Swift.Hashable {}
extension GCoreVideoCallsSDK.SecurityErrorCode : Swift.Equatable {}
extension GCoreVideoCallsSDK.SecurityErrorCode : Swift.Hashable {}
extension GCoreVideoCallsSDK.SecurityErrorCode : Swift.RawRepresentable {}
extension GCoreVideoCallsSDK.ErrorType : Swift.Equatable {}
extension GCoreVideoCallsSDK.ErrorType : Swift.Hashable {}
extension GCoreVideoCallsSDK.MediaError : Swift.Equatable {}
extension GCoreVideoCallsSDK.MediaError : Swift.Hashable {}
extension GCoreVideoCallsSDK.CloseCode : Swift.Equatable {}
extension GCoreVideoCallsSDK.CloseCode : Swift.Hashable {}
extension GCoreVideoCallsSDK.CloseCode : Swift.RawRepresentable {}
extension GCoreVideoCallsSDK.FrameOpCode : Swift.Equatable {}
extension GCoreVideoCallsSDK.FrameOpCode : Swift.Hashable {}
extension GCoreVideoCallsSDK.FrameOpCode : Swift.RawRepresentable {}
extension GCoreVideoCallsSDK.FoundationSecurityError : Swift.Equatable {}
extension GCoreVideoCallsSDK.FoundationSecurityError : Swift.Hashable {}
extension GCoreVideoCallsSDK.TCPTransportError : Swift.Equatable {}
extension GCoreVideoCallsSDK.TCPTransportError : Swift.Hashable {}
extension GCoreVideoCallsSDK.SwiftyJSONError : Swift.Equatable {}
extension GCoreVideoCallsSDK.SwiftyJSONError : Swift.Hashable {}
extension GCoreVideoCallsSDK.SwiftyJSONError : Swift.RawRepresentable {}
extension GCoreVideoCallsSDK.`Type` : Swift.Equatable {}
extension GCoreVideoCallsSDK.`Type` : Swift.Hashable {}
extension GCoreVideoCallsSDK.`Type` : Swift.RawRepresentable {}
extension GCoreVideoCallsSDK.writingOptionsKeys : Swift.Equatable {}
extension GCoreVideoCallsSDK.writingOptionsKeys : Swift.Hashable {}
